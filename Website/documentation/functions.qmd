---
format:
  html:
    include-in-header:
      text: |
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
---

<div style="text-align: center;" id="functions">
  <h1>Functions <i class="fas fa-book-open"></i></h1>
</div>

## Method: `precompute_route`

<p class = "text"> Precompute the shortest route for a single trip. </p>

<p class = "text"> Given a row containing the coordinates of departure and return points, this method calculates the shortest path using the OpenStreetMap graph. </p>

### Parameters

<ul class = "text">
  <li> **`row`** (pandas.Series): a row from the input DataFrame containing trip information. The row must include the following columns: </li> 
  <ul class = "text">
    <li> `'Departure_latitude'`, `'Departure_longitude'` </li>
    <li> `'Return_latitude'`, `'Return_longitude'` </li>
  </ul>
</ul>

### Returns

<ul class = "text"> 
  <li> **list of int or None**: a list of node IDs representing the shortest path in the graph, or `None` if the route cannot be computed. </li>
</ul>

### Examples

<p class = "text"> Example: Precompute the shortest route for a single trip. </p>

```python
import pandas as pd

row = pd.Series({
    "Departure_latitude": 43.608,
    "Departure_longitude": 3.879,
    "Return_latitude": 43.610,
    "Return_longitude": 3.881
})

animation.precompute_route(row)
# Output: [123456, 123457, 123458, ...]
```

## Method: `create_animation`

<p class = "text"> Generate a video animation of the bike trips. </p>

<p class = "text"> This method processes all frames in parallel, saving intermediate images to the disk, and combines them into a video file. </p>

### Returns

<ul class = "text">
  <li> **None**: this method does not return any value. </li>
</ul>

### Notes

<ul class = "text">
 <li> This method uses **multiprocessing** to parallelize frame generation, which can be resource-intensive. </li>
 <li> Ensure that you have sufficient disk space for temporary files generated during the process. </li>
</ul>

### Examples

<p class = "text"> Example: Generate the animation for the loaded dataset. </p>

```python
animation = BikeAnimation(input_file="data/trips.csv")
animation.create_animation()
```

## Method : `download_file`

<p class = "text"> Download a file from a URL, store it locally, and verify its integrity using a SHA256 hash. </p>

### Parameters

<ul class = "text">
  <li> **`url`** (str): The URL of the file to download. </li>
  <li> **`output_path`** (str): Path where the downloaded file will be saved. </li>
  <li> **`expected_hash`** (str): The expected SHA256 hash of the file to verify its integrity. </li>
</ul>

### Returns

<ul class = "text">
  <li> **None**: This function does not return any value but raises an exception if the hash verification fails. </li>
</ul>

### Examples

<p class = "text"> Example: Download a file and verify its integrity. </p>

```python
download_file(
    url="https://example.com/data.csv",
    output_path="local_data/data.csv",
    expected_hash="abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
)
```

## Method : `is_within_radius`

<p class = "text"> Check if a given point (latitude, longitude) is within a specified radius from a center point. </p>

### Parameters

<ul class = "text"> <li> **`lat`** (float): Latitude of the point to check. </li> <li> **`lon`** (float): Longitude of the point to check. </li> <li> **`center_lat`** (float): Latitude of the center point. </li> <li> **`center_lon`** (float): Longitude of the center point. </li> <li> **`radius_km`** (float): The radius in kilometers. </li> </ul>

### Returns
<ul class = "text"> <li> **bool**: `True` if the point is within the radius, otherwise `False`. </li> </ul>

### Examples

<p class = "text"> Example: Check if a point is within 15 km of Montpellier. </p>

```python
is_within_radius(
    lat=43.6, lon=3.9, 
    center_lat=43.6119, center_lon=3.8772, 
    radius_km=15
)
```

## Method : `find_station_name`

<p class = "text"> Find the name of the nearest station for a given geographic point by calculating distances using Geopy. </p>

### Parameters

<ul class = "text"> <li> **`latitude`** (float): Latitude of the target point. </li> <li> **`longitude`** (float): Longitude of the target point. </li> <li> **`stations_df`** (pandas.DataFrame): DataFrame containing station data with columns `'latitude'`, `'longitude'`, and `'station_name'`. </li> </ul>

### Returns

<ul class = "text"> <li> **str**: Name of the nearest station. </li> </ul>

### Examples

<p class = "text"> Example: Find the nearest station to a point. </p>

```python
find_station_name(
    latitude=43.6, longitude=3.9, 
    stations_df=stations
)
```

## Method : `safe_nearest_node`

<p class = "text"> Securely find the nearest node in a graph for a given geographic point, handling exceptions. </p>

### Parameters

<ul class = "text"> <li> **`graph`** (networkx.Graph): The road network graph. </li> <li> **`latitude`** (float): Latitude of the target point. </li> <li> **`longitude`** (float): Longitude of the target point. </li> </ul>

### Returns

<ul class = "text"> <li> **int**: ID of the nearest node. </li> </ul>

### Examples

<p class = "text"> Example: Find the nearest node in a road network. </p>

```python
safe_nearest_node(
    graph=osm_graph, 
    latitude=43.6, longitude=3.9
)
```

## Method : `create_layer_for_date`

<p class = "text"> Create a map layer for a given date, including paths and station markers. </p>

### Parameters

<ul class = "text"> <li> **`date`** (str): Date in the format `'YYYY-MM-DD'`. </li> <li> **`map_obj`** (folium.Map): The map object to add the layer to. </li> <li> **`data`** (pandas.DataFrame): DataFrame containing path and station information for the date. </li> </ul>

### Returns

<ul class = "text"> <li> **None**: This function does not return a value but modifies the map object in place. </li> </ul>

### Examples

<p class = "text"> Example: Create a map layer for July 10, 2023. </p>

```python
create_layer_for_date(
    date="2023-07-10", 
    map_obj=folium_map, 
    data=traffic_data
)
```
