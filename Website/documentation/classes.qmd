---
format:
  html:
    include-in-header:
      text: |
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
---

<div style="text-align: center;">
<h1>Classes <i class="fas fa-book-open"></i></h1>
</div>

## Class: `BikeAnimation`

<p class = "text"> Generate an animation of bike trips using geospatial data and OpenStreetMap. </p>

<p class = "text"> This class processes bike trip data, computes routes on a graph derived from OpenStreetMap, and generates a video animation visualizing the trips over time. </p>

### Parameters

<ul class = "text">
  <li> **`input_file`** (str): path to the CSV file containing trip data. The file must include the following columns:  
  `'Departure_Date'`, `'Departure_Time'`, `'Return_Date'`, `'Return_Time'`,  
  `'Departure_latitude'`, `'Departure_longitude'`, `'Return_latitude'`, `'Return_longitude'`. </li>

  <li> **`place_name`** (str, optional): name of the place to fetch the OpenStreetMap graph for, e.g., `"Montpellier, France"`. Default is `"Montpellier, France"`. </li>

  <li> **`target_date`** (str or datetime-like, optional): filter trips for a specific date. If not specified, all dates in the input file are used. Default is `None`. </li>

  <li> **`output_video`** (str, optional): path to the output video file. Default is `"bike_animation.mp4"`. </li>

  <li> **`fps`** (int, optional): frames per second for the output video. Default is 30. </li>

  <li> **`minutes_per_second`** (int, optional): the speed ratio of real-world minutes to animation seconds. Default is 120 minutes per animation second. </li>

  <li> **`sample_size`** (int, optional): number of trips to process from the input file. If `None`, all trips are processed.  Default is `None`. </li>
</ul>

### Attributes

<ul class = "text">
  <li> **`df`** (pandas.DataFrame): the processed DataFrame containing trip data with additional computed fields. </li>

  <li> **`G`** (networkx.MultiDiGraph): the graph representation of the OpenStreetMap data for the specified place. </li>

  <li> **`nodes`** (geopandas.GeoDataFrame): GeoDataFrame containing the nodes of the graph. </li>

  <li> **`total_frames`** (int): total number of frames to generate for the animation. </li>

  <li> **`background_file`** (str): path to the saved background graph image. </li>
</ul>

### Methods

<ul class = "text">
  <li> **`precompute_route(row)`**: calculates the shortest route between two points. </li>
  <li> `save_graph_background()`: generates and saves a background image of the graph. </li>
  <li> `create_animation()`: creates a video animation from the trips. </li>
</ul>

<br>

<p class = "text"> **Note:** for more details about the functions, visit the <a href="functions.html">Functions section</a>. </p>

### Examples

<p class = "text"> Create an animation for a dataset with the default settings. </p>

```python
animation = BikeAnimation(input_file="data/trips.csv", place_name="Paris, France")
animation.create_animation()
```